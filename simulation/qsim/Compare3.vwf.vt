// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/22/2024 17:04:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Compare3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Compare3_vlg_sample_tst(
	A,
	B,
	bigger_in,
	smaller_in,
	sampler_tx
);
input [2:0] A;
input [2:0] B;
input  bigger_in;
input  smaller_in;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or bigger_in or smaller_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Compare3_vlg_check_tst (
	bigger,
	smaller,
	sampler_rx
);
input  bigger;
input  smaller;
input sampler_rx;

reg  bigger_expected;
reg  smaller_expected;

reg  bigger_prev;
reg  smaller_prev;

reg  bigger_expected_prev;
reg  smaller_expected_prev;

reg  last_bigger_exp;
reg  last_smaller_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	bigger_prev = bigger;
	smaller_prev = smaller;
end

// update expected /o prevs

always @(trigger)
begin
	bigger_expected_prev = bigger_expected;
	smaller_expected_prev = smaller_expected;
end



// expected bigger
initial
begin
	bigger_expected = 1'bX;
end 

// expected smaller
initial
begin
	smaller_expected = 1'bX;
end 
// generate trigger
always @(bigger_expected or bigger or smaller_expected or smaller)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bigger = %b | expected smaller = %b | ",bigger_expected_prev,smaller_expected_prev);
	$display("| real bigger = %b | real smaller = %b | ",bigger_prev,smaller_prev);
`endif
	if (
		( bigger_expected_prev !== 1'bx ) && ( bigger_prev !== bigger_expected_prev )
		&& ((bigger_expected_prev !== last_bigger_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bigger :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bigger_expected_prev);
		$display ("     Real value = %b", bigger_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bigger_exp = bigger_expected_prev;
	end
	if (
		( smaller_expected_prev !== 1'bx ) && ( smaller_prev !== smaller_expected_prev )
		&& ((smaller_expected_prev !== last_smaller_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smaller :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smaller_expected_prev);
		$display ("     Real value = %b", smaller_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smaller_exp = smaller_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Compare3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] A;
reg [2:0] B;
reg bigger_in;
reg smaller_in;
// wires                                               
wire bigger;
wire smaller;

wire sampler;                             

// assign statements (if any)                          
Compare3 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.bigger(bigger),
	.bigger_in(bigger_in),
	.smaller(smaller),
	.smaller_in(smaller_in)
);
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #120000 1'b0;
	A[2] = #80000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #80000 1'b1;
	A[2] = #120000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #80000 1'b1;
	A[2] = #160000 1'b0;
	A[2] = #120000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #120000 1'b0;
	A[1] = #120000 1'b1;
	A[1] = #40000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #80000 1'b0;
	A[1] = #120000 1'b1;
	A[1] = #80000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #80000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #40000 1'b0;
	A[1] = #120000 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #120000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #80000 1'b1;
	A[0] = #120000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #80000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #120000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #200000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #40000 1'b1;
	B[2] = #120000 1'b0;
	B[2] = #40000 1'b1;
	B[2] = #40000 1'b0;
	B[2] = #160000 1'b1;
	B[2] = #120000 1'b0;
	B[2] = #40000 1'b1;
	B[2] = #160000 1'b0;
	B[2] = #40000 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #120000 1'b1;
	B[1] = #80000 1'b0;
	B[1] = #120000 1'b1;
	B[1] = #40000 1'b0;
	B[1] = #80000 1'b1;
	B[1] = #160000 1'b0;
	B[1] = #160000 1'b1;
	B[1] = #40000 1'b0;
	B[1] = #40000 1'b1;
	B[1] = #40000 1'b0;
	B[1] = #80000 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
	B[0] = #200000 1'b0;
	B[0] = #80000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #80000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #40000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #80000 1'b1;
	B[0] = #120000 1'b0;
	B[0] = #40000 1'b1;
	B[0] = #120000 1'b0;
	B[0] = #40000 1'b1;
end 

// smaller_in
initial
begin
	smaller_in = 1'b0;
end 

// bigger_in
initial
begin
	bigger_in = 1'b0;
end 

Compare3_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.bigger_in(bigger_in),
	.smaller_in(smaller_in),
	.sampler_tx(sampler)
);

Compare3_vlg_check_tst tb_out(
	.bigger(bigger),
	.smaller(smaller),
	.sampler_rx(sampler)
);
endmodule

