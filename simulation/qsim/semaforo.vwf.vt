// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/22/2024 18:13:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FSM1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FSM1_vlg_sample_tst(
	CLK,
	start,
	sampler_tx
);
input  CLK;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FSM1_vlg_check_tst (
	GREEN,
	RED,
	t_out,
	YELLOW,
	sampler_rx
);
input  GREEN;
input  RED;
input [7:0] t_out;
input  YELLOW;
input sampler_rx;

reg  GREEN_expected;
reg  RED_expected;
reg [7:0] t_out_expected;
reg  YELLOW_expected;

reg  GREEN_prev;
reg  RED_prev;
reg [7:0] t_out_prev;
reg  YELLOW_prev;

reg  GREEN_expected_prev;
reg  RED_expected_prev;
reg [7:0] t_out_expected_prev;
reg  YELLOW_expected_prev;

reg  last_GREEN_exp;
reg  last_RED_exp;
reg [7:0] last_t_out_exp;
reg  last_YELLOW_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	GREEN_prev = GREEN;
	RED_prev = RED;
	t_out_prev = t_out;
	YELLOW_prev = YELLOW;
end

// update expected /o prevs

always @(trigger)
begin
	GREEN_expected_prev = GREEN_expected;
	RED_expected_prev = RED_expected;
	t_out_expected_prev = t_out_expected;
	YELLOW_expected_prev = YELLOW_expected;
end



// expected GREEN
initial
begin
	GREEN_expected = 1'bX;
end 

// expected RED
initial
begin
	RED_expected = 1'bX;
end 

// expected YELLOW
initial
begin
	YELLOW_expected = 1'bX;
end 
// expected t_out[ 7 ]
initial
begin
	t_out_expected[7] = 1'bX;
end 
// expected t_out[ 6 ]
initial
begin
	t_out_expected[6] = 1'bX;
end 
// expected t_out[ 5 ]
initial
begin
	t_out_expected[5] = 1'bX;
end 
// expected t_out[ 4 ]
initial
begin
	t_out_expected[4] = 1'bX;
end 
// expected t_out[ 3 ]
initial
begin
	t_out_expected[3] = 1'bX;
end 
// expected t_out[ 2 ]
initial
begin
	t_out_expected[2] = 1'bX;
end 
// expected t_out[ 1 ]
initial
begin
	t_out_expected[1] = 1'bX;
end 
// expected t_out[ 0 ]
initial
begin
	t_out_expected[0] = 1'bX;
end 
// generate trigger
always @(GREEN_expected or GREEN or RED_expected or RED or t_out_expected or t_out or YELLOW_expected or YELLOW)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected GREEN = %b | expected RED = %b | expected t_out = %b | expected YELLOW = %b | ",GREEN_expected_prev,RED_expected_prev,t_out_expected_prev,YELLOW_expected_prev);
	$display("| real GREEN = %b | real RED = %b | real t_out = %b | real YELLOW = %b | ",GREEN_prev,RED_prev,t_out_prev,YELLOW_prev);
`endif
	if (
		( GREEN_expected_prev !== 1'bx ) && ( GREEN_prev !== GREEN_expected_prev )
		&& ((GREEN_expected_prev !== last_GREEN_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GREEN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GREEN_expected_prev);
		$display ("     Real value = %b", GREEN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GREEN_exp = GREEN_expected_prev;
	end
	if (
		( RED_expected_prev !== 1'bx ) && ( RED_prev !== RED_expected_prev )
		&& ((RED_expected_prev !== last_RED_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RED :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RED_expected_prev);
		$display ("     Real value = %b", RED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RED_exp = RED_expected_prev;
	end
	if (
		( t_out_expected_prev[0] !== 1'bx ) && ( t_out_prev[0] !== t_out_expected_prev[0] )
		&& ((t_out_expected_prev[0] !== last_t_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_out_expected_prev);
		$display ("     Real value = %b", t_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_out_exp[0] = t_out_expected_prev[0];
	end
	if (
		( t_out_expected_prev[1] !== 1'bx ) && ( t_out_prev[1] !== t_out_expected_prev[1] )
		&& ((t_out_expected_prev[1] !== last_t_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_out_expected_prev);
		$display ("     Real value = %b", t_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_out_exp[1] = t_out_expected_prev[1];
	end
	if (
		( t_out_expected_prev[2] !== 1'bx ) && ( t_out_prev[2] !== t_out_expected_prev[2] )
		&& ((t_out_expected_prev[2] !== last_t_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_out_expected_prev);
		$display ("     Real value = %b", t_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_out_exp[2] = t_out_expected_prev[2];
	end
	if (
		( t_out_expected_prev[3] !== 1'bx ) && ( t_out_prev[3] !== t_out_expected_prev[3] )
		&& ((t_out_expected_prev[3] !== last_t_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_out_expected_prev);
		$display ("     Real value = %b", t_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_out_exp[3] = t_out_expected_prev[3];
	end
	if (
		( t_out_expected_prev[4] !== 1'bx ) && ( t_out_prev[4] !== t_out_expected_prev[4] )
		&& ((t_out_expected_prev[4] !== last_t_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_out_expected_prev);
		$display ("     Real value = %b", t_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_out_exp[4] = t_out_expected_prev[4];
	end
	if (
		( t_out_expected_prev[5] !== 1'bx ) && ( t_out_prev[5] !== t_out_expected_prev[5] )
		&& ((t_out_expected_prev[5] !== last_t_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_out_expected_prev);
		$display ("     Real value = %b", t_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_out_exp[5] = t_out_expected_prev[5];
	end
	if (
		( t_out_expected_prev[6] !== 1'bx ) && ( t_out_prev[6] !== t_out_expected_prev[6] )
		&& ((t_out_expected_prev[6] !== last_t_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_out_expected_prev);
		$display ("     Real value = %b", t_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_out_exp[6] = t_out_expected_prev[6];
	end
	if (
		( t_out_expected_prev[7] !== 1'bx ) && ( t_out_prev[7] !== t_out_expected_prev[7] )
		&& ((t_out_expected_prev[7] !== last_t_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_out_expected_prev);
		$display ("     Real value = %b", t_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_out_exp[7] = t_out_expected_prev[7];
	end
	if (
		( YELLOW_expected_prev !== 1'bx ) && ( YELLOW_prev !== YELLOW_expected_prev )
		&& ((YELLOW_expected_prev !== last_YELLOW_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port YELLOW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", YELLOW_expected_prev);
		$display ("     Real value = %b", YELLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_YELLOW_exp = YELLOW_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FSM1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg start;
// wires                                               
wire GREEN;
wire RED;
wire [7:0] t_out;
wire YELLOW;

wire sampler;                             

// assign statements (if any)                          
FSM1 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.GREEN(GREEN),
	.RED(RED),
	.start(start),
	.t_out(t_out),
	.YELLOW(YELLOW)
);

// start
initial
begin
	start = 1'b0;
	start = #10000 1'b1;
	start = #10000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

FSM1_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.start(start),
	.sampler_tx(sampler)
);

FSM1_vlg_check_tst tb_out(
	.GREEN(GREEN),
	.RED(RED),
	.t_out(t_out),
	.YELLOW(YELLOW),
	.sampler_rx(sampler)
);
endmodule

