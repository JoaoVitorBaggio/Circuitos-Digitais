// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/07/2024 22:37:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TopLevel
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TopLevel_vlg_sample_tst(
	ADD,
	AND,
	clk,
	HLT,
	JMP,
	JN,
	JZ,
	LDA,
	N,
	NOP,
	NOT,
	OR,
	STA,
	Z,
	sampler_tx
);
input  ADD;
input  AND;
input  clk;
input  HLT;
input  JMP;
input  JN;
input  JZ;
input  LDA;
input  N;
input  NOP;
input  NOT;
input  OR;
input  STA;
input  Z;
output sampler_tx;

reg sample;
time current_time;
always @(ADD or AND or clk or HLT or JMP or JN or JZ or LDA or N or NOP or NOT or OR or STA or Z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TopLevel_vlg_check_tst (
	charge_AC,
	charge_NZ,
	charge_PC,
	charge_RDM,
	charge_REM,
	charge_RI,
	goto_t0,
	inc_PC,
	read,
	sel,
	ULA_ADD,
	ULA_AND,
	ULA_NOT,
	ULA_OR,
	ULA_Y,
	write,
	sampler_rx
);
input  charge_AC;
input  charge_NZ;
input  charge_PC;
input  charge_RDM;
input  charge_REM;
input  charge_RI;
input  goto_t0;
input  inc_PC;
input  read;
input  sel;
input  ULA_ADD;
input  ULA_AND;
input  ULA_NOT;
input  ULA_OR;
input  ULA_Y;
input  write;
input sampler_rx;

reg  charge_AC_expected;
reg  charge_NZ_expected;
reg  charge_PC_expected;
reg  charge_RDM_expected;
reg  charge_REM_expected;
reg  charge_RI_expected;
reg  goto_t0_expected;
reg  inc_PC_expected;
reg  read_expected;
reg  sel_expected;
reg  ULA_ADD_expected;
reg  ULA_AND_expected;
reg  ULA_NOT_expected;
reg  ULA_OR_expected;
reg  ULA_Y_expected;
reg  write_expected;

reg  charge_AC_prev;
reg  charge_NZ_prev;
reg  charge_PC_prev;
reg  charge_RDM_prev;
reg  charge_REM_prev;
reg  charge_RI_prev;
reg  goto_t0_prev;
reg  inc_PC_prev;
reg  read_prev;
reg  sel_prev;
reg  ULA_ADD_prev;
reg  ULA_AND_prev;
reg  ULA_NOT_prev;
reg  ULA_OR_prev;
reg  ULA_Y_prev;
reg  write_prev;

reg  charge_AC_expected_prev;
reg  charge_NZ_expected_prev;
reg  charge_PC_expected_prev;
reg  charge_RDM_expected_prev;
reg  charge_REM_expected_prev;
reg  charge_RI_expected_prev;
reg  goto_t0_expected_prev;
reg  inc_PC_expected_prev;
reg  read_expected_prev;
reg  sel_expected_prev;
reg  ULA_ADD_expected_prev;
reg  ULA_AND_expected_prev;
reg  ULA_NOT_expected_prev;
reg  ULA_OR_expected_prev;
reg  ULA_Y_expected_prev;
reg  write_expected_prev;

reg  last_charge_AC_exp;
reg  last_charge_NZ_exp;
reg  last_charge_PC_exp;
reg  last_charge_RDM_exp;
reg  last_charge_REM_exp;
reg  last_charge_RI_exp;
reg  last_goto_t0_exp;
reg  last_inc_PC_exp;
reg  last_read_exp;
reg  last_sel_exp;
reg  last_ULA_ADD_exp;
reg  last_ULA_AND_exp;
reg  last_ULA_NOT_exp;
reg  last_ULA_OR_exp;
reg  last_ULA_Y_exp;
reg  last_write_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	charge_AC_prev = charge_AC;
	charge_NZ_prev = charge_NZ;
	charge_PC_prev = charge_PC;
	charge_RDM_prev = charge_RDM;
	charge_REM_prev = charge_REM;
	charge_RI_prev = charge_RI;
	goto_t0_prev = goto_t0;
	inc_PC_prev = inc_PC;
	read_prev = read;
	sel_prev = sel;
	ULA_ADD_prev = ULA_ADD;
	ULA_AND_prev = ULA_AND;
	ULA_NOT_prev = ULA_NOT;
	ULA_OR_prev = ULA_OR;
	ULA_Y_prev = ULA_Y;
	write_prev = write;
end

// update expected /o prevs

always @(trigger)
begin
	charge_AC_expected_prev = charge_AC_expected;
	charge_NZ_expected_prev = charge_NZ_expected;
	charge_PC_expected_prev = charge_PC_expected;
	charge_RDM_expected_prev = charge_RDM_expected;
	charge_REM_expected_prev = charge_REM_expected;
	charge_RI_expected_prev = charge_RI_expected;
	goto_t0_expected_prev = goto_t0_expected;
	inc_PC_expected_prev = inc_PC_expected;
	read_expected_prev = read_expected;
	sel_expected_prev = sel_expected;
	ULA_ADD_expected_prev = ULA_ADD_expected;
	ULA_AND_expected_prev = ULA_AND_expected;
	ULA_NOT_expected_prev = ULA_NOT_expected;
	ULA_OR_expected_prev = ULA_OR_expected;
	ULA_Y_expected_prev = ULA_Y_expected;
	write_expected_prev = write_expected;
end



// expected charge_AC
initial
begin
	charge_AC_expected = 1'bX;
end 

// expected charge_NZ
initial
begin
	charge_NZ_expected = 1'bX;
end 

// expected charge_PC
initial
begin
	charge_PC_expected = 1'bX;
end 

// expected charge_RDM
initial
begin
	charge_RDM_expected = 1'bX;
end 

// expected charge_REM
initial
begin
	charge_REM_expected = 1'bX;
end 

// expected charge_RI
initial
begin
	charge_RI_expected = 1'bX;
end 

// expected goto_t0
initial
begin
	goto_t0_expected = 1'bX;
end 

// expected inc_PC
initial
begin
	inc_PC_expected = 1'bX;
end 

// expected read
initial
begin
	read_expected = 1'bX;
end 

// expected sel
initial
begin
	sel_expected = 1'bX;
end 

// expected ULA_ADD
initial
begin
	ULA_ADD_expected = 1'bX;
end 

// expected ULA_AND
initial
begin
	ULA_AND_expected = 1'bX;
end 

// expected ULA_NOT
initial
begin
	ULA_NOT_expected = 1'bX;
end 

// expected ULA_OR
initial
begin
	ULA_OR_expected = 1'bX;
end 

// expected ULA_Y
initial
begin
	ULA_Y_expected = 1'bX;
end 

// expected write
initial
begin
	write_expected = 1'bX;
end 
// generate trigger
always @(charge_AC_expected or charge_AC or charge_NZ_expected or charge_NZ or charge_PC_expected or charge_PC or charge_RDM_expected or charge_RDM or charge_REM_expected or charge_REM or charge_RI_expected or charge_RI or goto_t0_expected or goto_t0 or inc_PC_expected or inc_PC or read_expected or read or sel_expected or sel or ULA_ADD_expected or ULA_ADD or ULA_AND_expected or ULA_AND or ULA_NOT_expected or ULA_NOT or ULA_OR_expected or ULA_OR or ULA_Y_expected or ULA_Y or write_expected or write)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected charge_AC = %b | expected charge_NZ = %b | expected charge_PC = %b | expected charge_RDM = %b | expected charge_REM = %b | expected charge_RI = %b | expected goto_t0 = %b | expected inc_PC = %b | expected read = %b | expected sel = %b | expected ULA_ADD = %b | expected ULA_AND = %b | expected ULA_NOT = %b | expected ULA_OR = %b | expected ULA_Y = %b | expected write = %b | ",charge_AC_expected_prev,charge_NZ_expected_prev,charge_PC_expected_prev,charge_RDM_expected_prev,charge_REM_expected_prev,charge_RI_expected_prev,goto_t0_expected_prev,inc_PC_expected_prev,read_expected_prev,sel_expected_prev,ULA_ADD_expected_prev,ULA_AND_expected_prev,ULA_NOT_expected_prev,ULA_OR_expected_prev,ULA_Y_expected_prev,write_expected_prev);
	$display("| real charge_AC = %b | real charge_NZ = %b | real charge_PC = %b | real charge_RDM = %b | real charge_REM = %b | real charge_RI = %b | real goto_t0 = %b | real inc_PC = %b | real read = %b | real sel = %b | real ULA_ADD = %b | real ULA_AND = %b | real ULA_NOT = %b | real ULA_OR = %b | real ULA_Y = %b | real write = %b | ",charge_AC_prev,charge_NZ_prev,charge_PC_prev,charge_RDM_prev,charge_REM_prev,charge_RI_prev,goto_t0_prev,inc_PC_prev,read_prev,sel_prev,ULA_ADD_prev,ULA_AND_prev,ULA_NOT_prev,ULA_OR_prev,ULA_Y_prev,write_prev);
`endif
	if (
		( charge_AC_expected_prev !== 1'bx ) && ( charge_AC_prev !== charge_AC_expected_prev )
		&& ((charge_AC_expected_prev !== last_charge_AC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port charge_AC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", charge_AC_expected_prev);
		$display ("     Real value = %b", charge_AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_charge_AC_exp = charge_AC_expected_prev;
	end
	if (
		( charge_NZ_expected_prev !== 1'bx ) && ( charge_NZ_prev !== charge_NZ_expected_prev )
		&& ((charge_NZ_expected_prev !== last_charge_NZ_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port charge_NZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", charge_NZ_expected_prev);
		$display ("     Real value = %b", charge_NZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_charge_NZ_exp = charge_NZ_expected_prev;
	end
	if (
		( charge_PC_expected_prev !== 1'bx ) && ( charge_PC_prev !== charge_PC_expected_prev )
		&& ((charge_PC_expected_prev !== last_charge_PC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port charge_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", charge_PC_expected_prev);
		$display ("     Real value = %b", charge_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_charge_PC_exp = charge_PC_expected_prev;
	end
	if (
		( charge_RDM_expected_prev !== 1'bx ) && ( charge_RDM_prev !== charge_RDM_expected_prev )
		&& ((charge_RDM_expected_prev !== last_charge_RDM_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port charge_RDM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", charge_RDM_expected_prev);
		$display ("     Real value = %b", charge_RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_charge_RDM_exp = charge_RDM_expected_prev;
	end
	if (
		( charge_REM_expected_prev !== 1'bx ) && ( charge_REM_prev !== charge_REM_expected_prev )
		&& ((charge_REM_expected_prev !== last_charge_REM_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port charge_REM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", charge_REM_expected_prev);
		$display ("     Real value = %b", charge_REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_charge_REM_exp = charge_REM_expected_prev;
	end
	if (
		( charge_RI_expected_prev !== 1'bx ) && ( charge_RI_prev !== charge_RI_expected_prev )
		&& ((charge_RI_expected_prev !== last_charge_RI_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port charge_RI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", charge_RI_expected_prev);
		$display ("     Real value = %b", charge_RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_charge_RI_exp = charge_RI_expected_prev;
	end
	if (
		( goto_t0_expected_prev !== 1'bx ) && ( goto_t0_prev !== goto_t0_expected_prev )
		&& ((goto_t0_expected_prev !== last_goto_t0_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port goto_t0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", goto_t0_expected_prev);
		$display ("     Real value = %b", goto_t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_goto_t0_exp = goto_t0_expected_prev;
	end
	if (
		( inc_PC_expected_prev !== 1'bx ) && ( inc_PC_prev !== inc_PC_expected_prev )
		&& ((inc_PC_expected_prev !== last_inc_PC_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inc_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inc_PC_expected_prev);
		$display ("     Real value = %b", inc_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inc_PC_exp = inc_PC_expected_prev;
	end
	if (
		( read_expected_prev !== 1'bx ) && ( read_prev !== read_expected_prev )
		&& ((read_expected_prev !== last_read_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_expected_prev);
		$display ("     Real value = %b", read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_read_exp = read_expected_prev;
	end
	if (
		( sel_expected_prev !== 1'bx ) && ( sel_prev !== sel_expected_prev )
		&& ((sel_expected_prev !== last_sel_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sel_exp = sel_expected_prev;
	end
	if (
		( ULA_ADD_expected_prev !== 1'bx ) && ( ULA_ADD_prev !== ULA_ADD_expected_prev )
		&& ((ULA_ADD_expected_prev !== last_ULA_ADD_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_ADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_ADD_expected_prev);
		$display ("     Real value = %b", ULA_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA_ADD_exp = ULA_ADD_expected_prev;
	end
	if (
		( ULA_AND_expected_prev !== 1'bx ) && ( ULA_AND_prev !== ULA_AND_expected_prev )
		&& ((ULA_AND_expected_prev !== last_ULA_AND_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_AND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_AND_expected_prev);
		$display ("     Real value = %b", ULA_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA_AND_exp = ULA_AND_expected_prev;
	end
	if (
		( ULA_NOT_expected_prev !== 1'bx ) && ( ULA_NOT_prev !== ULA_NOT_expected_prev )
		&& ((ULA_NOT_expected_prev !== last_ULA_NOT_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_NOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_NOT_expected_prev);
		$display ("     Real value = %b", ULA_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ULA_NOT_exp = ULA_NOT_expected_prev;
	end
	if (
		( ULA_OR_expected_prev !== 1'bx ) && ( ULA_OR_prev !== ULA_OR_expected_prev )
		&& ((ULA_OR_expected_prev !== last_ULA_OR_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_OR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_OR_expected_prev);
		$display ("     Real value = %b", ULA_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ULA_OR_exp = ULA_OR_expected_prev;
	end
	if (
		( ULA_Y_expected_prev !== 1'bx ) && ( ULA_Y_prev !== ULA_Y_expected_prev )
		&& ((ULA_Y_expected_prev !== last_ULA_Y_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_Y :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_Y_expected_prev);
		$display ("     Real value = %b", ULA_Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ULA_Y_exp = ULA_Y_expected_prev;
	end
	if (
		( write_expected_prev !== 1'bx ) && ( write_prev !== write_expected_prev )
		&& ((write_expected_prev !== last_write_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_expected_prev);
		$display ("     Real value = %b", write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_exp = write_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TopLevel_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADD;
reg AND;
reg clk;
reg HLT;
reg JMP;
reg JN;
reg JZ;
reg LDA;
reg N;
reg NOP;
reg NOT;
reg OR;
reg STA;
reg Z;
// wires                                               
wire charge_AC;
wire charge_NZ;
wire charge_PC;
wire charge_RDM;
wire charge_REM;
wire charge_RI;
wire goto_t0;
wire inc_PC;
wire read;
wire sel;
wire ULA_ADD;
wire ULA_AND;
wire ULA_NOT;
wire ULA_OR;
wire ULA_Y;
wire write;

wire sampler;                             

// assign statements (if any)                          
TopLevel i1 (
// port map - connection between master ports and signals/registers   
	.ADD(ADD),
	.\AND (AND),
	.charge_AC(charge_AC),
	.charge_NZ(charge_NZ),
	.charge_PC(charge_PC),
	.charge_RDM(charge_RDM),
	.charge_REM(charge_REM),
	.charge_RI(charge_RI),
	.clk(clk),
	.goto_t0(goto_t0),
	.HLT(HLT),
	.inc_PC(inc_PC),
	.JMP(JMP),
	.JN(JN),
	.JZ(JZ),
	.LDA(LDA),
	.N(N),
	.NOP(NOP),
	.\NOT (NOT),
	.\OR (OR),
	.read(read),
	.sel(sel),
	.STA(STA),
	.ULA_ADD(ULA_ADD),
	.ULA_AND(ULA_AND),
	.ULA_NOT(ULA_NOT),
	.ULA_OR(ULA_OR),
	.ULA_Y(ULA_Y),
	.write(write),
	.Z(Z)
);

// ADD
initial
begin
	ADD = 1'b0;
end 

// AND
initial
begin
	AND = 1'b1;
end 

// HLT
initial
begin
	HLT = 1'b0;
end 

// JMP
initial
begin
	JMP = 1'b0;
end 

// JN
initial
begin
	JN = 1'b0;
end 

// JZ
initial
begin
	JZ = 1'b0;
end 

// LDA
initial
begin
	LDA = 1'b0;
end 

// NOP
initial
begin
	NOP = 1'b0;
end 

// NOT
initial
begin
	NOT = 1'b0;
end 

// OR
initial
begin
	OR = 1'b0;
end 

// STA
initial
begin
	STA = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// N
initial
begin
	N = 1'b0;
end 

// Z
initial
begin
	Z = 1'b0;
end 

TopLevel_vlg_sample_tst tb_sample (
	.ADD(ADD),
	.AND(AND),
	.clk(clk),
	.HLT(HLT),
	.JMP(JMP),
	.JN(JN),
	.JZ(JZ),
	.LDA(LDA),
	.N(N),
	.NOP(NOP),
	.NOT(NOT),
	.OR(OR),
	.STA(STA),
	.Z(Z),
	.sampler_tx(sampler)
);

TopLevel_vlg_check_tst tb_out(
	.charge_AC(charge_AC),
	.charge_NZ(charge_NZ),
	.charge_PC(charge_PC),
	.charge_RDM(charge_RDM),
	.charge_REM(charge_REM),
	.charge_RI(charge_RI),
	.goto_t0(goto_t0),
	.inc_PC(inc_PC),
	.read(read),
	.sel(sel),
	.ULA_ADD(ULA_ADD),
	.ULA_AND(ULA_AND),
	.ULA_NOT(ULA_NOT),
	.ULA_OR(ULA_OR),
	.ULA_Y(ULA_Y),
	.write(write),
	.sampler_rx(sampler)
);
endmodule

