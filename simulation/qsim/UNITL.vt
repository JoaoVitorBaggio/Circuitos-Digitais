// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/20/2024 10:01:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NEANDER
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NEANDER_vlg_sample_tst(
	CLK_IN,
	DEBUG,
	Reset,
	step,
	sampler_tx
);
input  CLK_IN;
input  DEBUG;
input  Reset;
input  step;
output sampler_tx;

reg sample;
time current_time;
always @(CLK_IN or DEBUG or Reset or step)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NEANDER_vlg_check_tst (
	AC,
	HLT,
	N,
	PC,
	Z,
	sampler_rx
);
input [7:0] AC;
input  HLT;
input  N;
input [7:0] PC;
input  Z;
input sampler_rx;

reg [7:0] AC_expected;
reg  HLT_expected;
reg  N_expected;
reg [7:0] PC_expected;
reg  Z_expected;

reg [7:0] AC_prev;
reg  HLT_prev;
reg  N_prev;
reg [7:0] PC_prev;
reg  Z_prev;

reg [7:0] AC_expected_prev;
reg  HLT_expected_prev;
reg  N_expected_prev;
reg [7:0] PC_expected_prev;
reg  Z_expected_prev;

reg [7:0] last_AC_exp;
reg  last_HLT_exp;
reg  last_N_exp;
reg [7:0] last_PC_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	AC_prev = AC;
	HLT_prev = HLT;
	N_prev = N;
	PC_prev = PC;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	AC_expected_prev = AC_expected;
	HLT_expected_prev = HLT_expected;
	N_expected_prev = N_expected;
	PC_expected_prev = PC_expected;
	Z_expected_prev = Z_expected;
end


// expected AC[ 7 ]
initial
begin
	AC_expected[7] = 1'bX;
	AC_expected[7] = #999000 1'b0;
end 
// expected AC[ 6 ]
initial
begin
	AC_expected[6] = 1'bX;
	AC_expected[6] = #999000 1'b0;
end 
// expected AC[ 5 ]
initial
begin
	AC_expected[5] = 1'bX;
	AC_expected[5] = #999000 1'b0;
end 
// expected AC[ 4 ]
initial
begin
	AC_expected[4] = 1'bX;
	AC_expected[4] = #999000 1'b0;
end 
// expected AC[ 3 ]
initial
begin
	AC_expected[3] = 1'bX;
	AC_expected[3] = #999000 1'b0;
end 
// expected AC[ 2 ]
initial
begin
	AC_expected[2] = 1'bX;
	AC_expected[2] = #999000 1'b0;
end 
// expected AC[ 1 ]
initial
begin
	AC_expected[1] = 1'bX;
	AC_expected[1] = #999000 1'b0;
end 
// expected AC[ 0 ]
initial
begin
	AC_expected[0] = 1'bX;
	AC_expected[0] = #999000 1'b0;
end 

// expected HLT
initial
begin
	HLT_expected = 1'bX;
	HLT_expected = #999000 1'b0;
end 

// expected N
initial
begin
	N_expected = 1'bX;
	N_expected = #999000 1'b0;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
	PC_expected[7] = #999000 1'b0;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
	PC_expected[6] = #999000 1'b0;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
	PC_expected[5] = #999000 1'b0;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
	PC_expected[4] = #999000 1'b0;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
	PC_expected[3] = #999000 1'b0;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
	PC_expected[2] = #999000 1'b0;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
	PC_expected[1] = #999000 1'b0;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
	PC_expected[0] = #999000 1'b0;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
	Z_expected = #999000 1'b0;
end 
// generate trigger
always @(AC_expected or AC or HLT_expected or HLT or N_expected or N or PC_expected or PC or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AC = %b | expected HLT = %b | expected N = %b | expected PC = %b | expected Z = %b | ",AC_expected_prev,HLT_expected_prev,N_expected_prev,PC_expected_prev,Z_expected_prev);
	$display("| real AC = %b | real HLT = %b | real N = %b | real PC = %b | real Z = %b | ",AC_prev,HLT_prev,N_prev,PC_prev,Z_prev);
`endif
	if (
		( AC_expected_prev[0] !== 1'bx ) && ( AC_prev[0] !== AC_expected_prev[0] )
		&& ((AC_expected_prev[0] !== last_AC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[0] = AC_expected_prev[0];
	end
	if (
		( AC_expected_prev[1] !== 1'bx ) && ( AC_prev[1] !== AC_expected_prev[1] )
		&& ((AC_expected_prev[1] !== last_AC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[1] = AC_expected_prev[1];
	end
	if (
		( AC_expected_prev[2] !== 1'bx ) && ( AC_prev[2] !== AC_expected_prev[2] )
		&& ((AC_expected_prev[2] !== last_AC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[2] = AC_expected_prev[2];
	end
	if (
		( AC_expected_prev[3] !== 1'bx ) && ( AC_prev[3] !== AC_expected_prev[3] )
		&& ((AC_expected_prev[3] !== last_AC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[3] = AC_expected_prev[3];
	end
	if (
		( AC_expected_prev[4] !== 1'bx ) && ( AC_prev[4] !== AC_expected_prev[4] )
		&& ((AC_expected_prev[4] !== last_AC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[4] = AC_expected_prev[4];
	end
	if (
		( AC_expected_prev[5] !== 1'bx ) && ( AC_prev[5] !== AC_expected_prev[5] )
		&& ((AC_expected_prev[5] !== last_AC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[5] = AC_expected_prev[5];
	end
	if (
		( AC_expected_prev[6] !== 1'bx ) && ( AC_prev[6] !== AC_expected_prev[6] )
		&& ((AC_expected_prev[6] !== last_AC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[6] = AC_expected_prev[6];
	end
	if (
		( AC_expected_prev[7] !== 1'bx ) && ( AC_prev[7] !== AC_expected_prev[7] )
		&& ((AC_expected_prev[7] !== last_AC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[7] = AC_expected_prev[7];
	end
	if (
		( HLT_expected_prev !== 1'bx ) && ( HLT_prev !== HLT_expected_prev )
		&& ((HLT_expected_prev !== last_HLT_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HLT_expected_prev);
		$display ("     Real value = %b", HLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HLT_exp = HLT_expected_prev;
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NEANDER_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_IN;
reg DEBUG;
reg Reset;
reg step;
// wires                                               
wire [7:0] AC;
wire HLT;
wire N;
wire [7:0] PC;
wire Z;

wire sampler;                             

// assign statements (if any)                          
NEANDER i1 (
// port map - connection between master ports and signals/registers   
	.AC(AC),
	.CLK_IN(CLK_IN),
	.DEBUG(DEBUG),
	.HLT(HLT),
	.N(N),
	.PC(PC),
	.Reset(Reset),
	.step(step),
	.Z(Z)
);

// CLK_IN
initial
begin
	CLK_IN = 1'b0;
end 

// DEBUG
initial
begin
	DEBUG = 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #20000 1'b1;
end 

// step
always
begin
	step = 1'b0;
	step = #20000 1'b1;
	#20000;
end 

NEANDER_vlg_sample_tst tb_sample (
	.CLK_IN(CLK_IN),
	.DEBUG(DEBUG),
	.Reset(Reset),
	.step(step),
	.sampler_tx(sampler)
);

NEANDER_vlg_check_tst tb_out(
	.AC(AC),
	.HLT(HLT),
	.N(N),
	.PC(PC),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

